/* _____ MIXINS _____ */

// Fonts
// ==========================================================================

@mixin importFont($fontname, $filename, $isBold: false, $isItalic: false) {

  @font-face {
    font-family: $fontname;

    // Safari, Android, iOS
    src: url('fonts/#{$filename}.ttf') format('truetype');

    @if $isBold {
      font-weight: bold;
    } @else {
      font-weight: normal;
    }

    @if $isItalic {
      font-style: italic;
    } @else {
      font-style: normal;
    }
  }

}

@mixin fontStyle($family-name, $generic-family, $font-size: $baseFontSize) {
  font-family: $family-name, $generic-family;
  font-size: $font-size;
}


// Units
// ==========================================================================

@mixin remIt($attr, $value, $value2: '', $before: '', $between:'', $after: '', $useModernizr: true) {

  $cssremunit: getPrefix(cssremunit, $useModernizr);

  // it's good to keep the fallback at all times for debug purpose
  @if $value2 == '' {
    #{$attr}: #{$before}#{$value}px#{$after};
  } @else {
    #{$attr}: #{$before}#{$value}px#{$between}#{$value2}px#{$after};
  }

  #{map-get($cssremunit, yes)} & {

    @if $value2 == '' {
      #{$attr}: #{$before}#{$value/$baseFontSize}rem#{$after};
    } @else {
      #{$attr}: #{$before}#{$value/$baseFontSize}rem#{$between}#{$value/$baseFontSize}rem#{$after};
    }

  }
}

// Helpers
// ==========================================================================

// Applies theme color depending on provided palette.
@mixin themeProperty($theme, $property, $color, $additionalPropertiesPositionIsFront, $additionalProperties) {
  @if $additionalPropertiesPositionIsFront {
    #{$property}: unquote($additionalProperties + ' ' + map-get($theme, $color));
  } @else {
    #{$property}: unquote(map-get($theme, $color) + ' ' + $additionalProperties);
  }
}

// Applies theme color depending on provided palette. Use this in your code.
@mixin theme($property, $color, $additionalPropertiesPositionIsFront: false, $additionalProperties: '') {
  $light: map-get($themes, $light-theme);
  $dark: map-get($themes, $dark-theme);

  @include themeProperty($light, $property, $color, $additionalPropertiesPositionIsFront, $additionalProperties);

  @media (prefers-color-scheme: dark) {
    @include themeProperty($dark, $property, $color, $additionalPropertiesPositionIsFront, $additionalProperties);
  }
}

/* _____ UNIVERSAL HELPERS _____ */

// From H5BP
// ==========================================================================

// Image replacement
@mixin ir {
  background-color: transparent;
  border: 0;
  overflow: hidden;

  &:before {
    display: block;
    width: 0;
    height: 100%;
    content: "";
  }
}

// Hide from both screenreaders and browsers: h5bp.com/u
@mixin hidden {
  display: none !important;
  visibility: hidden;
}

// Hide only visually, but have it available for screenreaders: h5bp.com/v
@mixin visuallyHidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;

  // Extends the visuallyHidden feature to allow the element to be focusable
  // when navigated to via the keyboard: h5bp.com/p
  &.focusable:active,
  &.focusable:focus {
    position: static;
    margin: 0;
    width: auto;
    height: auto;
    overflow: visible;
    clip: auto;
  }
}

// Hide visually and from screenreaders, but maintain layout
@mixin invisible {
  visibility: hidden;
}

// Contain floats: h5bp.com/q
@mixin clearfix {
  &:before,
  &:after {
    display: table;
    content: ' ';
  }

  &:after {
    clear: both;
  }
}
